    _   _  _ _____      _____ ___  ___  __      _____ ___ _  __   __
   /_\ | \| / __\ \    / / __| _ \/ __| \ \    / / __| __| |/ /  / /
  / _ \| .` \__ \\ \/\/ /| _||   /\__ \  \ \/\/ /| _|| _|| ' <  / _ \
 /_/ \_\_|\_|___/ \_/\_/ |___|_|_\|___/   \_/\_/ |___|___|_|\_\ \___/

Your name(s):
- Gracjan Chmielnicki
- Tom Hansult

Please submit your textual answers to the following questions in this file:
- P-6.9 - (26^4)/2 = 456976/2 = 228488
- P-6.11 - drawing draws on drawing when i click draw because of single thread
- P-6.12 - now I cant open menu until draw is finished; single thread could cause this problem
- P-6.14 - there is not  run  method overridden
- P-6.18 - one potential problem with this behavior is that if the user input is not in the correct format (e.g. if it is not an integer), the program will throw an exception and terminate. This could be problematic because it means that the program will not be able to handle invalid input gracefully and will not be able to continue running.
- P-6.20 - we may encounter the problem since sum is not synchronised
- P-6.21 - now it is all good since no matter which thread goes first, it will be executed as one process so it is extremaly safe
- P-6.23 - a lock is considered reentrant if it can be acquired multiple times by the same thread without causing the thread to deadlock; yes, it's slightly different; flexibility, debugging, performance, readability; complexity, compatibility, it requires more memory and CPU time to manage the lock
- P-6.25 - the implementation is not thread-safe, it could be solved using synchronized methods
- P-6.26 - in general, it is safer to use notifyAll() because it ensures that all waiting threads are awakened, even if some of them are not ready to be awakened yet, however, if you have a large number of waiting threads and only a few of them are actually ready to be awakened, using notifyAll() can be inefficient because it wakes up all waiting threads
- P-6.28 - it is not thread safe, threads are running simultaneously
- P-6.29 - The possible results are the integers from 3 to 34, because a1 and a2 are each adding 1 and 2 to the contents of the IntCell object in each iteration;  replacing the calls to start() with calls to run() will cause the run() method to be executed in the main thread instead of in a separate thread; If the join() calls are removed, the main thread will not wait for a1 and a2 to complete and will simply continue to the next statement so it alwaya prints 3; use synchronized blocks and the notifyAll() method.